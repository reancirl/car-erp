import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Checkbox } from '@/components/ui/checkbox';
import AppLayout from '@/layouts/app-layout';
import { type BreadcrumbItem } from '@/types';
import { Head, Link } from '@inertiajs/react';
import axios from 'axios';
import {
    Wrench,
    Package,
    Users,
    TrendingUp,
    AlertTriangle,
    Clock,
    DollarSign,
    CheckCircle,
    XCircle,
    Activity,
    BarChart3,
    ArrowUpRight,
    ArrowDownRight,
    Bell,
    ClipboardCheck,
    ExternalLink,
    Car,
    FileText,
    ShoppingCart,
    Target,
    Star,
    Shield,
    AlertCircle,
} from 'lucide-react';
import { useEffect, useMemo, useState } from 'react';
import { DashboardFilters } from '@/components/dashboard/dashboard-filters';

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'Dashboard',
        href: '/dashboard',
    },
];

interface AssignedChecklistItem {
    id: number;
    label: string;
    assignment_item_id: number | null;
    is_completed: boolean;
}

interface AssignedChecklist {
    id: number;
    assignment_id: number | null;
    title: string;
    frequency: string;
    due_at: string | null;
    branch: string | null;
    status: string;
    progress_percentage: number;
    items: AssignedChecklistItem[];
}

interface Branch {
    id: number;
    name: string;
}

interface KPIs {
    sales: {
        revenue: { current: number; previous: number; change: number };
        units_sold: { current: number; previous: number; change: number };
        avg_deal_value: { current: number; previous: number };
    };
    service: {
        work_orders: { current: number; active: number; completed: number; change: number };
        revenue: { current: number; previous: number; change: number };
        avg_turnaround: number;
    };
    pipeline: {
        total_leads: number;
        conversion_rate: { current: number; previous: number; change: number };
        test_drives: { scheduled: number; completed: number };
    };
    customers: {
        total: number;
        satisfaction: { current: number; previous: number; change: number };
        nps: { current: number; previous: number; change: number };
    };
    inventory: {
        units_in_stock: number;
        total_value: number;
        low_stock_parts: number;
        total_parts: number;
        parts_value: number;
    };
    warranty: {
        pending_claims: number;
        approved_claims: number;
        total_claims_amount: number;
    };
    compliance: {
        overdue_checklists: number;
        completion_rate: number;
    };
}

interface ChartData {
    pipeline_stages: Array<{ stage: string; count: number; value: number }>;
    revenue_trend: Array<{ month: string; revenue: number; units: number }>;
    service_trend: Array<{ month: string; revenue: number; count: number }>;
    top_sales_reps: Array<{ name: string; units_sold: number; revenue: number }>;
    lead_sources: Array<{ source: string; count: number }>;
}

interface Alert {
    type: string;
    message: string;
    time: string;
    priority: string;
}

interface Activity {
    action: string;
    user: string;
    time: string;
}

interface DashboardProps {
    assignedChecklists?: AssignedChecklist[];
    filters: {
        date_range: string;
        branch_id: number | null;
        start_date: string | null;
        end_date: string | null;
        current_start: string;
        current_end: string;
    };
    branches: Branch[];
    kpis: KPIs;
    charts: ChartData;
    alerts: Alert[];
    recentActivities: Activity[];
}

export default function Dashboard({
    assignedChecklists = [],
    filters,
    branches,
    kpis,
    charts,
    alerts,
    recentActivities,
}: DashboardProps) {
    const [activeChecklistId, setActiveChecklistId] = useState<number | null>(
        assignedChecklists[0]?.id ?? null
    );
    const [checklistProgress, setChecklistProgress] = useState<Record<number, Record<number, boolean>>>(
        () => {
            const initialState: Record<number, Record<number, boolean>> = {};
            assignedChecklists.forEach((checklist) => {
                initialState[checklist.id] = checklist.items.reduce<Record<number, boolean>>(
                    (acc, item) => {
                        acc[item.id] = Boolean(item.is_completed);
                        return acc;
                    },
                    {}
                );
            });
            return initialState;
        }
    );
    const [assignmentMeta, setAssignmentMeta] = useState<
        Record<number, { progress_percentage: number; status: string }>
    >(() => {
        const meta: Record<number, { progress_percentage: number; status: string }> = {};
        assignedChecklists.forEach((checklist) => {
            if (checklist.assignment_id) {
                meta[checklist.assignment_id] = {
                    progress_percentage: checklist.progress_percentage ?? 0,
                    status: checklist.status,
                };
            }
        });
        return meta;
    });
    const [savingItems, setSavingItems] = useState<Record<string, boolean>>({});

    useEffect(() => {
        setChecklistProgress(() => {
            const updated: Record<number, Record<number, boolean>> = {};
            assignedChecklists.forEach((checklist) => {
                updated[checklist.id] = checklist.items.reduce<Record<number, boolean>>((acc, item) => {
                    acc[item.id] = Boolean(item.is_completed);
                    return acc;
                }, {});
            });
            return updated;
        });

        setAssignmentMeta(() => {
            const meta: Record<number, { progress_percentage: number; status: string }> = {};
            assignedChecklists.forEach((checklist) => {
                if (checklist.assignment_id) {
                    meta[checklist.assignment_id] = {
                        progress_percentage: checklist.progress_percentage ?? 0,
                        status: checklist.status,
                    };
                }
            });
            return meta;
        });

        setActiveChecklistId((current) => {
            if (current && assignedChecklists.some((checklist) => checklist.id === current)) {
                return current;
            }
            return assignedChecklists[0]?.id ?? null;
        });
    }, [assignedChecklists]);

    const activeChecklist = useMemo(
        () =>
            assignedChecklists.find((checklist) => checklist.id === activeChecklistId) ??
            assignedChecklists[0] ??
            null,
        [activeChecklistId, assignedChecklists]
    );
    const activeChecklistMeta =
        activeChecklist && activeChecklist.assignment_id
            ? assignmentMeta[activeChecklist.assignment_id]
            : undefined;

    const formatDueDate = (value?: string | null) => {
        if (!value) return 'No schedule';
        const date = new Date(value);
        if (Number.isNaN(date.getTime())) {
            return 'No schedule';
        }
        return date.toLocaleString();
    };

    const getChecklistCompletion = (checklist: AssignedChecklist) => {
        const checklistState = checklistProgress[checklist.id];
        const totalItems = checklist.items.length || 1;

        if (!checklistState) {
            const percentage = checklist.progress_percentage ?? 0;
            const completedFromPercentage = Math.round((percentage / 100) * totalItems);
            return {
                completed: Math.min(completedFromPercentage, checklist.items.length),
                total: checklist.items.length,
                percentage,
            };
        }

        const completed = checklist.items.filter((item) => checklistState[item.id]).length;
        return {
            completed,
            total: checklist.items.length,
            percentage: Math.round((completed / totalItems) * 100) || 0,
        };
    };

    const handleChecklistItemToggle = async (
        checklist: AssignedChecklist,
        item: AssignedChecklistItem
    ) => {
        if (!checklist.assignment_id || !item.assignment_item_id) {
            return;
        }

        const checklistId = checklist.id;
        const itemId = item.id;
        const key = `${checklist.assignment_id}:${item.assignment_item_id}`;
        const previousValue = Boolean(checklistProgress[checklistId]?.[itemId]);
        const nextValue = !previousValue;

        setChecklistProgress((prev) => ({
            ...prev,
            [checklistId]: {
                ...(prev[checklistId] ?? {}),
                [itemId]: nextValue,
            },
        }));
        setSavingItems((prev) => ({ ...prev, [key]: true }));

        try {
            const response = await axios.post(
                route('dashboard.checklists.items.toggle', {
                    assignment: checklist.assignment_id,
                    assignmentItem: item.assignment_item_id,
                }),
                {
                    is_completed: nextValue,
                }
            );

            const data = response.data as {
                assignment_id: number;
                assignment_item_id: number;
                is_completed: boolean;
                progress_percentage: number;
                status: string;
            };

            setChecklistProgress((prev) => ({
                ...prev,
                [checklistId]: {
                    ...(prev[checklistId] ?? {}),
                    [itemId]: data.is_completed,
                },
            }));

            setAssignmentMeta((prev) => ({
                ...prev,
                [data.assignment_id]: {
                    progress_percentage: data.progress_percentage,
                    status: data.status,
                },
            }));
        } catch (error) {
            console.error(error);
            setChecklistProgress((prev) => ({
                ...prev,
                [checklistId]: {
                    ...(prev[checklistId] ?? {}),
                    [itemId]: previousValue,
                },
            }));
        } finally {
            setSavingItems((prev) => {
                const { [key]: _unused, ...rest } = prev;
                return rest;
            });
        }
    };

    const formatCurrency = (value: number) => {
        if (value >= 1000000) {
            return `₱${(value / 1000000).toFixed(1)}M`;
        }
        if (value >= 1000) {
            return `₱${(value / 1000).toFixed(0)}K`;
        }
        return `₱${value.toFixed(0)}`;
    };

    const renderChangeIndicator = (change: number) => {
        if (change === 0) {
            return (
                <span className="text-xs text-muted-foreground flex items-center">
                    <span className="ml-1">No change</span>
                </span>
            );
        }

        return (
            <div className="flex items-center text-xs text-muted-foreground">
                {change > 0 ? (
                    <ArrowUpRight className="h-3 w-3 text-green-500 mr-1" />
                ) : (
                    <ArrowDownRight className="h-3 w-3 text-red-500 mr-1" />
                )}
                <span className={change > 0 ? 'text-green-500' : 'text-red-500'}>
                    {Math.abs(change).toFixed(1)}%
                </span>
                <span className="ml-1">vs previous period</span>
            </div>
        );
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Dashboard" />
            <div className="flex h-full flex-1 flex-col gap-6 p-6 overflow-x-auto">
                {/* Filters */}
                <DashboardFilters filters={filters} branches={branches} />

                {/* Primary KPI Cards - Sales, Service, Pipeline, Customers */}
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    {/* Sales Revenue */}
                    <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Sales Revenue</CardTitle>
                            <DollarSign className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{formatCurrency(kpis.sales.revenue.current)}</div>
                            {renderChangeIndicator(kpis.sales.revenue.change)}
                            <div className="mt-2 text-xs text-muted-foreground">
                                {kpis.sales.units_sold.current} units sold
                            </div>
                        </CardContent>
                    </Card>

                    {/* Service Revenue */}
                    <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Service Revenue</CardTitle>
                            <Wrench className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{formatCurrency(kpis.service.revenue.current)}</div>
                            {renderChangeIndicator(kpis.service.revenue.change)}
                            <div className="mt-2 text-xs text-muted-foreground">
                                {kpis.service.work_orders.active} active work orders
                            </div>
                        </CardContent>
                    </Card>

                    {/* Lead Conversion Rate */}
                    <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Lead Conversion</CardTitle>
                            <TrendingUp className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{kpis.pipeline.conversion_rate.current}%</div>
                            {renderChangeIndicator(kpis.pipeline.conversion_rate.change)}
                            <div className="mt-2 text-xs text-muted-foreground">
                                {kpis.pipeline.total_leads} total leads
                            </div>
                        </CardContent>
                    </Card>

                    {/* Customer Satisfaction */}
                    <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Customer Satisfaction</CardTitle>
                            <Users className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{kpis.customers.satisfaction.current}/5.0</div>
                            {renderChangeIndicator(kpis.customers.satisfaction.change)}
                            <div className="mt-2 text-xs text-muted-foreground">
                                NPS: {kpis.customers.nps.current}
                            </div>
                        </CardContent>
                    </Card>
                </div>

                {/* Secondary KPI Cards - Inventory, Warranty, Compliance */}
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    {/* Units in Stock */}
                    <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Vehicle Inventory</CardTitle>
                            <Car className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{kpis.inventory.units_in_stock}</div>
                            <p className="text-xs text-muted-foreground">units in stock</p>
                            <div className="mt-2 text-xs text-muted-foreground">
                                Value: {formatCurrency(kpis.inventory.total_value)}
                            </div>
                        </CardContent>
                    </Card>

                    {/* Parts Inventory */}
                    <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Parts Inventory</CardTitle>
                            <Package className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{kpis.inventory.total_parts.toLocaleString()}</div>
                            <p className="text-xs text-muted-foreground">parts in stock</p>
                            <div className="mt-2 text-xs text-red-500 font-medium">
                                {kpis.inventory.low_stock_parts} low stock alerts
                            </div>
                        </CardContent>
                    </Card>

                    {/* Warranty Claims */}
                    <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Warranty Claims</CardTitle>
                            <Shield className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{kpis.warranty.pending_claims}</div>
                            <p className="text-xs text-muted-foreground">pending claims</p>
                            <div className="mt-2 text-xs text-muted-foreground">
                                Approved: {formatCurrency(kpis.warranty.total_claims_amount)}
                            </div>
                        </CardContent>
                    </Card>

                    {/* Compliance */}
                    <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                            <CardTitle className="text-sm font-medium">Compliance Rate</CardTitle>
                            <FileText className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{kpis.compliance.completion_rate}%</div>
                            <p className="text-xs text-muted-foreground">completion rate</p>
                            {kpis.compliance.overdue_checklists > 0 && (
                                <div className="mt-2 text-xs text-red-500 font-medium">
                                    {kpis.compliance.overdue_checklists} overdue checklists
                                </div>
                            )}
                        </CardContent>
                    </Card>
                </div>

                {/* Main Content + Compliance Sidebar */}
                <div className="grid gap-6 lg:grid-cols-[2fr,1fr]">
                    <div className="space-y-6">
                        {/* Charts Row */}
                        <div className="grid gap-6 md:grid-cols-2">
                            {/* Sales Pipeline */}
                            <Card>
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2">
                                        <BarChart3 className="h-5 w-5" />
                                        Sales Pipeline
                                    </CardTitle>
                                    <CardDescription>Current sales funnel performance</CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <div className="space-y-3">
                                        {charts.pipeline_stages.map((stage, index) => (
                                            <div key={index} className="flex items-center justify-between">
                                                <div className="flex items-center gap-2">
                                                    <div className="text-sm font-medium">{stage.stage}</div>
                                                    <Badge variant="secondary" className="text-xs">
                                                        {stage.count}
                                                    </Badge>
                                                </div>
                                                <div className="text-sm text-muted-foreground">
                                                    {formatCurrency(stage.value)}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                    <div className="mt-4 pt-4 border-t">
                                        <Link
                                            href="/sales/pipeline"
                                            className="text-sm text-blue-600 hover:underline flex items-center gap-1"
                                        >
                                            View detailed pipeline
                                            <ExternalLink className="h-3 w-3" />
                                        </Link>
                                    </div>
                                </CardContent>
                            </Card>

                            {/* Test Drives & Work Orders */}
                            <Card>
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2">
                                        <Target className="h-5 w-5" />
                                        Key Metrics
                                    </CardTitle>
                                    <CardDescription>Important operational metrics</CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div>
                                        <div className="flex justify-between items-center mb-2">
                                            <span className="text-sm font-medium">Test Drives</span>
                                            <span className="text-2xl font-bold">
                                                {kpis.pipeline.test_drives.scheduled}
                                            </span>
                                        </div>
                                        <Progress
                                            value={
                                                kpis.pipeline.test_drives.scheduled > 0
                                                    ? (kpis.pipeline.test_drives.completed /
                                                          kpis.pipeline.test_drives.scheduled) *
                                                      100
                                                    : 0
                                            }
                                            className="h-2"
                                        />
                                        <div className="text-xs text-muted-foreground mt-1">
                                            {kpis.pipeline.test_drives.completed} completed
                                        </div>
                                    </div>

                                    <div>
                                        <div className="flex justify-between items-center mb-2">
                                            <span className="text-sm font-medium">Work Orders</span>
                                            <span className="text-2xl font-bold">
                                                {kpis.service.work_orders.completed}
                                            </span>
                                        </div>
                                        <div className="text-xs text-muted-foreground">
                                            Avg turnaround: {kpis.service.avg_turnaround}h
                                        </div>
                                    </div>

                                    <div>
                                        <div className="flex justify-between items-center">
                                            <span className="text-sm font-medium">Avg Deal Value</span>
                                            <span className="text-lg font-bold">
                                                {formatCurrency(kpis.sales.avg_deal_value.current)}
                                            </span>
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                        </div>

                        {/* Top Sales Reps */}
                        {charts.top_sales_reps.length > 0 && (
                            <Card>
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2">
                                        <Star className="h-5 w-5" />
                                        Top Performing Sales Reps
                                    </CardTitle>
                                    <CardDescription>Based on units sold in selected period</CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <div className="space-y-3">
                                        {charts.top_sales_reps.slice(0, 5).map((rep, index) => (
                                            <div
                                                key={index}
                                                className="flex items-center justify-between p-3 rounded-lg border"
                                            >
                                                <div className="flex items-center gap-3">
                                                    <div className="flex items-center justify-center w-8 h-8 rounded-full bg-blue-100 text-blue-600 font-bold">
                                                        #{index + 1}
                                                    </div>
                                                    <div>
                                                        <div className="text-sm font-medium">{rep.name}</div>
                                                        <div className="text-xs text-muted-foreground">
                                                            {rep.units_sold} units sold
                                                        </div>
                                                    </div>
                                                </div>
                                                <div className="text-right">
                                                    <div className="text-sm font-semibold">
                                                        {formatCurrency(rep.revenue)}
                                                    </div>
                                                    <div className="text-xs text-muted-foreground">revenue</div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </CardContent>
                            </Card>
                        )}

                        {/* Alerts and Recent Activities */}
                        <div className="grid gap-6 md:grid-cols-2">
                            {/* Alerts */}
                            <Card>
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2">
                                        <Bell className="h-5 w-5" />
                                        System Alerts
                                    </CardTitle>
                                    <CardDescription>Important notifications and warnings</CardDescription>
                                </CardHeader>
                                <CardContent>
                                    {alerts.length === 0 ? (
                                        <div className="text-sm text-muted-foreground text-center py-8">
                                            No alerts at this time
                                        </div>
                                    ) : (
                                        <div className="space-y-3">
                                            {alerts.map((alert, index) => (
                                                <div
                                                    key={index}
                                                    className="flex items-start gap-3 p-3 rounded-lg border"
                                                >
                                                    {alert.type === 'warning' && (
                                                        <AlertTriangle className="h-4 w-4 text-yellow-500 mt-0.5" />
                                                    )}
                                                    {alert.type === 'error' && (
                                                        <XCircle className="h-4 w-4 text-red-500 mt-0.5" />
                                                    )}
                                                    {alert.type === 'info' && (
                                                        <Activity className="h-4 w-4 text-blue-500 mt-0.5" />
                                                    )}
                                                    {alert.type === 'success' && (
                                                        <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                                                    )}
                                                    <div className="flex-1">
                                                        <div className="text-sm font-medium">{alert.message}</div>
                                                        <div className="text-xs text-muted-foreground">
                                                            {alert.time}
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </CardContent>
                            </Card>

                            {/* Recent Activities */}
                            <Card>
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2">
                                        <Clock className="h-5 w-5" />
                                        Recent Activities
                                    </CardTitle>
                                    <CardDescription>Latest system activities and updates</CardDescription>
                                </CardHeader>
                                <CardContent>
                                    {recentActivities.length === 0 ? (
                                        <div className="text-sm text-muted-foreground text-center py-8">
                                            No recent activities
                                        </div>
                                    ) : (
                                        <div className="space-y-3">
                                            {recentActivities.map((activity, index) => (
                                                <div
                                                    key={index}
                                                    className="flex items-start gap-3 p-3 rounded-lg border"
                                                >
                                                    <Activity className="h-4 w-4 text-blue-500 mt-0.5" />
                                                    <div className="flex-1">
                                                        <div className="text-sm font-medium">{activity.action}</div>
                                                        <div className="text-xs text-muted-foreground">
                                                            by {activity.user} • {activity.time}
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </CardContent>
                            </Card>
                        </div>
                    </div>

                    {/* Compliance Sidebar */}
                    <div className="space-y-6">
                        <Card className="border-emerald-200">
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2">
                                    <ClipboardCheck className="h-5 w-5 text-emerald-600" />
                                    Assigned Checklists
                                </CardTitle>
                                <CardDescription>Compliance tasks assigned to you across branches</CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <div className="space-y-3">
                                    {assignedChecklists.length === 0 ? (
                                        <div className="rounded-lg border border-dashed p-4 text-sm text-muted-foreground">
                                            No checklists assigned to you yet.
                                        </div>
                                    ) : (
                                        assignedChecklists.map((checklist) => {
                                            const { completed, total, percentage } =
                                                getChecklistCompletion(checklist);
                                            const meta = checklist.assignment_id
                                                ? assignmentMeta[checklist.assignment_id]
                                                : null;
                                            const statusLabel = meta?.status ?? checklist.status ?? 'pending';
                                            return (
                                                <button
                                                    key={checklist.id}
                                                    type="button"
                                                    onClick={() => setActiveChecklistId(checklist.id)}
                                                    className={`w-full rounded-lg border p-3 text-left transition hover:border-emerald-400 ${
                                                        activeChecklist?.id === checklist.id
                                                            ? 'border-emerald-500 bg-emerald-50'
                                                            : ''
                                                    }`}
                                                >
                                                    <div className="flex items-center justify-between text-sm">
                                                        <span className="font-semibold">{checklist.title}</span>
                                                        <div className="flex items-center gap-1">
                                                            <Badge variant="outline" className="capitalize">
                                                                {statusLabel.replace('_', ' ')}
                                                            </Badge>
                                                            <Badge variant="secondary">{checklist.frequency}</Badge>
                                                        </div>
                                                    </div>
                                                    <div className="mt-1 text-xs text-muted-foreground">
                                                        Due {formatDueDate(checklist.due_at)} • {completed}/{total || 0}{' '}
                                                        items completed
                                                    </div>
                                                    <Progress value={percentage} className="mt-2 h-1.5" />
                                                </button>
                                            );
                                        })
                                    )}
                                </div>

                                {activeChecklist ? (
                                    <div className="space-y-3 border-t pt-4">
                                        <div className="flex items-start justify-between gap-2">
                                            <div>
                                                <div className="text-sm font-semibold">{activeChecklist.title}</div>
                                                <div className="text-xs text-muted-foreground">
                                                    {activeChecklist.branch ?? 'Unassigned Branch'} • Due{' '}
                                                    {formatDueDate(activeChecklist.due_at)}
                                                </div>
                                            </div>
                                            {activeChecklistMeta && (
                                                <Badge variant="outline" className="capitalize">
                                                    {activeChecklistMeta.status.replace('_', ' ')}
                                                </Badge>
                                            )}
                                        </div>
                                        <div className="space-y-2">
                                            {activeChecklist.items.length === 0 ? (
                                                <div className="rounded-lg border border-dashed p-3 text-xs text-muted-foreground">
                                                    No checklist items configured.
                                                </div>
                                            ) : (
                                                activeChecklist.items.map((item) => (
                                                    <label
                                                        key={item.id}
                                                        className="flex items-start gap-3 rounded-lg border p-3 text-sm"
                                                    >
                                                        <Checkbox
                                                            checked={Boolean(
                                                                checklistProgress[activeChecklist.id]?.[item.id]
                                                            )}
                                                            onCheckedChange={() =>
                                                                handleChecklistItemToggle(activeChecklist, item)
                                                            }
                                                            disabled={
                                                                !activeChecklist.assignment_id ||
                                                                !item.assignment_item_id ||
                                                                savingItems[
                                                                    `${activeChecklist.assignment_id}:${item.assignment_item_id}`
                                                                ]
                                                            }
                                                        />
                                                        <span className="flex-1 leading-snug">{item.label}</span>
                                                    </label>
                                                ))
                                            )}
                                        </div>
                                        <div className="flex gap-2">
                                            <Link href="/compliance/checklists" className="flex-1">
                                                <Button variant="outline" className="w-full">
                                                    <ExternalLink className="mr-2 h-4 w-4" />
                                                    Open Module
                                                </Button>
                                            </Link>
                                            <Link href={`/compliance/checklists/${activeChecklist.id}`} className="flex-1">
                                                <Button className="w-full bg-emerald-600 hover:bg-emerald-700">
                                                    Continue Checklist
                                                </Button>
                                            </Link>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="rounded-lg border border-dashed p-4 text-sm text-muted-foreground">
                                        Select a checklist to view its tasks once available.
                                    </div>
                                )}
                            </CardContent>
                        </Card>
                    </div>
                </div>
            </div>
        </AppLayout>
    );
}
