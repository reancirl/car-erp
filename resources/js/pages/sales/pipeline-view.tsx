import { Head, Link } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
    ArrowLeft, 
    TrendingUp, 
    Edit,
    User,
    Phone,
    Mail,
    Calendar,
    Clock,
    DollarSign,
    Target,
    FileText,
    CheckCircle,
    AlertTriangle,
    Download,
    Copy,
    ExternalLink,
    ArrowRight,
    Activity
} from 'lucide-react';
import { type BreadcrumbItem } from '@/types';

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'Sales & Customer',
        href: '/sales',
    },
    {
        title: 'Pipeline',
        href: '/sales/pipeline',
    },
    {
        title: 'Opportunity Details',
        href: '/sales/pipeline/1',
    },
];

export default function PipelineView() {
    const mockPipelineEntry = {
        id: 1,
        customer_name: 'John Smith',
        lead_id: 'LD-2025-001',
        current_stage: 'quote_sent',
        previous_stage: 'qualified',
        stage_entry_timestamp: '2025-01-13 14:30:00',
        stage_duration_hours: 5.5,
        sales_rep: 'Sarah Sales Rep',
        vehicle_interest: '2024 Honda Civic',
        quote_amount: 28500,
        probability: 78,
        next_action: 'Follow up on quote',
        next_action_due: '2025-01-14 10:00:00',
        auto_logged_events: [
            { event: 'Lead Created', timestamp: '2025-01-13 09:15:00', system: 'Lead Management', details: 'New lead captured from web form' },
            { event: 'Lead Qualified', timestamp: '2025-01-13 09:45:00', system: 'CRM Auto-Scoring', details: 'Auto-qualified with score 78/100' },
            { event: 'Quote Generated', timestamp: '2025-01-13 14:30:00', system: 'Pricing Engine', details: 'Quote #Q-2025-001 generated for $28,500' }
        ],
        manual_notes: 2,
        attachments: 1,
        customer_phone: '+1-555-0123',
        customer_email: 'john.smith@email.com',
        created_at: '2025-01-13 09:15:00'
    };

    const stageHistory = [
        {
            stage: 'reservation_made',
            status: 'upcoming',
            timestamp: null,
            duration: null,
            auto_trigger: 'Customer confirms purchase'
        },
        {
            stage: 'test_drive_completed',
            status: 'upcoming',
            timestamp: null,
            duration: null,
            auto_trigger: 'GPS tracking completion'
        },
        {
            stage: 'test_drive_scheduled',
            status: 'upcoming',
            timestamp: null,
            duration: null,
            auto_trigger: 'Test drive booking confirmed'
        },
        {
            stage: 'quote_sent',
            status: 'current',
            timestamp: '2025-01-13 14:30:00',
            duration: '5.5h',
            auto_trigger: 'Quote generated by pricing engine'
        },
        {
            stage: 'qualified',
            status: 'completed',
            timestamp: '2025-01-13 09:45:00',
            duration: '0.5h',
            auto_trigger: 'Lead score threshold reached (â‰¥70)'
        },
        {
            stage: 'lead',
            status: 'completed',
            timestamp: '2025-01-13 09:15:00',
            duration: '0.5h',
            auto_trigger: 'Initial lead capture'
        }
    ];

    const getStageBadge = (stage: string) => {
        switch (stage) {
            case 'lead':
                return (
                    <Badge variant="outline" className="bg-blue-100 text-blue-800">
                        Lead
                    </Badge>
                );
            case 'qualified':
                return (
                    <Badge variant="outline" className="bg-green-100 text-green-800">
                        Qualified
                    </Badge>
                );
            case 'quote_sent':
                return (
                    <Badge variant="outline" className="bg-yellow-100 text-yellow-800">
                        Quote Sent
                    </Badge>
                );
            case 'test_drive_scheduled':
                return (
                    <Badge variant="outline" className="bg-purple-100 text-purple-800">
                        Test Drive Scheduled
                    </Badge>
                );
            case 'test_drive_completed':
                return (
                    <Badge variant="outline" className="bg-indigo-100 text-indigo-800">
                        Test Drive Completed
                    </Badge>
                );
            case 'reservation_made':
                return (
                    <Badge variant="default" className="bg-green-100 text-green-800">
                        <CheckCircle className="h-3 w-3 mr-1" />
                        Reservation Made
                    </Badge>
                );
            case 'lost':
                return (
                    <Badge variant="destructive">
                        Lost
                    </Badge>
                );
            default:
                return <Badge variant="secondary">{stage}</Badge>;
        }
    };

    const getProbabilityBadge = (probability: number) => {
        if (probability >= 80) {
            return <Badge variant="default" className="bg-green-100 text-green-800">High ({probability}%)</Badge>;
        } else if (probability >= 50) {
            return <Badge variant="outline" className="bg-yellow-100 text-yellow-800">Medium ({probability}%)</Badge>;
        } else if (probability > 0) {
            return <Badge variant="outline" className="bg-red-100 text-red-800">Low ({probability}%)</Badge>;
        } else {
            return <Badge variant="outline" className="bg-gray-100 text-gray-800">Lost (0%)</Badge>;
        }
    };

    const getStageProgress = (stage: string) => {
        const stages = ['lead', 'qualified', 'quote_sent', 'test_drive_scheduled', 'test_drive_completed', 'reservation_made'];
        const currentIndex = stages.indexOf(stage);
        if (currentIndex === -1) return 0;
        return ((currentIndex + 1) / stages.length) * 100;
    };

    const getStageIcon = (status: string) => {
        switch (status) {
            case 'completed':
                return <CheckCircle className="h-4 w-4 text-green-600" />;
            case 'current':
                return <Clock className="h-4 w-4 text-blue-600" />;
            case 'upcoming':
                return <Clock className="h-4 w-4 text-gray-400" />;
            default:
                return <Clock className="h-4 w-4 text-gray-400" />;
        }
    };

    const getEventIcon = (system: string) => {
        switch (system) {
            case 'Lead Management':
                return <User className="h-4 w-4 text-blue-600" />;
            case 'CRM Auto-Scoring':
                return <Target className="h-4 w-4 text-green-600" />;
            case 'Pricing Engine':
                return <DollarSign className="h-4 w-4 text-yellow-600" />;
            default:
                return <Activity className="h-4 w-4 text-gray-600" />;
        }
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title={`Pipeline Details - ${mockPipelineEntry.lead_id}`} />
            
            <div className="space-y-6 p-6">
                {/* Header */}
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                        <Link href="/sales/pipeline">
                            <Button variant="outline" size="sm">
                                <ArrowLeft className="h-4 w-4 mr-2" />
                                Back to Pipeline
                            </Button>
                        </Link>
                        <div>
                            <h1 className="text-2xl font-bold">Pipeline Opportunity</h1>
                            <p className="text-muted-foreground">Lead ID: {mockPipelineEntry.lead_id}</p>
                        </div>
                    </div>
                    <div className="flex space-x-2">
                        <Button variant="outline" size="sm">
                            <Download className="h-4 w-4 mr-2" />
                            Export Report
                        </Button>
                        <Link href={`/sales/pipeline/${mockPipelineEntry.id}/edit`}>
                            <Button size="sm">
                                <Edit className="h-4 w-4 mr-2" />
                                Edit Opportunity
                            </Button>
                        </Link>
                    </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Main Content */}
                    <div className="lg:col-span-2 space-y-6">
                        {/* Opportunity Overview */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center justify-between">
                                    <div className="flex items-center">
                                        <TrendingUp className="h-5 w-5 mr-2" />
                                        Opportunity Overview
                                    </div>
                                    <div className="flex space-x-2">
                                        {getStageBadge(mockPipelineEntry.current_stage)}
                                        {getProbabilityBadge(mockPipelineEntry.probability)}
                                    </div>
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div className="space-y-4">
                                        <div>
                                            <p className="text-sm font-medium text-muted-foreground">Lead ID</p>
                                            <div className="flex items-center space-x-2">
                                                <p className="text-lg font-semibold">{mockPipelineEntry.lead_id}</p>
                                                <Button variant="ghost" size="sm">
                                                    <Copy className="h-4 w-4" />
                                                </Button>
                                            </div>
                                        </div>
                                        <div>
                                            <p className="text-sm font-medium text-muted-foreground">Customer</p>
                                            <p className="text-lg font-semibold">{mockPipelineEntry.customer_name}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm font-medium text-muted-foreground">Sales Representative</p>
                                            <p className="text-sm">{mockPipelineEntry.sales_rep}</p>
                                        </div>
                                    </div>
                                    <div className="space-y-4">
                                        <div>
                                            <p className="text-sm font-medium text-muted-foreground">Vehicle Interest</p>
                                            <p className="text-lg font-semibold">{mockPipelineEntry.vehicle_interest}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm font-medium text-muted-foreground">Quote Amount</p>
                                            <p className="text-lg font-semibold text-green-600">${mockPipelineEntry.quote_amount.toLocaleString()}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm font-medium text-muted-foreground">Time in Current Stage</p>
                                            <p className="text-sm">{mockPipelineEntry.stage_duration_hours}h</p>
                                        </div>
                                    </div>
                                </div>
                                <div className="mt-6">
                                    <p className="text-sm font-medium text-muted-foreground mb-2">Stage Progress</p>
                                    <div className="w-full bg-gray-200 rounded-full h-3">
                                        <div 
                                            className="bg-blue-600 h-3 rounded-full" 
                                            style={{ width: `${getStageProgress(mockPipelineEntry.current_stage)}%` }}
                                        ></div>
                                    </div>
                                    <p className="text-xs text-muted-foreground mt-1">{Math.round(getStageProgress(mockPipelineEntry.current_stage))}% through pipeline</p>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Stage History Timeline */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center">
                                    <Activity className="h-5 w-5 mr-2" />
                                    Stage History Timeline
                                </CardTitle>
                                <CardDescription>
                                    Automated progression through sales pipeline stages
                                </CardDescription>
                            </CardHeader>
                            <CardContent>
                                <div className="space-y-4">
                                    {stageHistory.map((stage, index) => (
                                        <div key={index} className={`flex items-start space-x-3 p-3 border rounded-lg ${
                                            stage.status === 'current' ? 'border-blue-500 bg-blue-50' : 
                                            stage.status === 'completed' ? 'border-green-500 bg-green-50' : 
                                            'border-gray-200'
                                        }`}>
                                            <div className="flex-shrink-0 mt-1">
                                                {getStageIcon(stage.status)}
                                            </div>
                                            <div className="flex-1">
                                                <div className="flex items-center justify-between">
                                                    <div className="flex items-center space-x-2">
                                                        {getStageBadge(stage.stage)}
                                                        {stage.status === 'current' && (
                                                            <Badge variant="outline" className="bg-blue-100 text-blue-800">Current</Badge>
                                                        )}
                                                    </div>
                                                    {stage.timestamp && (
                                                        <p className="text-xs text-muted-foreground">{stage.timestamp}</p>
                                                    )}
                                                </div>
                                                <p className="text-sm text-muted-foreground mt-1">{stage.auto_trigger}</p>
                                                {stage.duration && (
                                                    <p className="text-xs text-muted-foreground mt-1">Duration: {stage.duration}</p>
                                                )}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </CardContent>
                        </Card>

                        {/* Auto-Logged Events */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center">
                                    <FileText className="h-5 w-5 mr-2" />
                                    Auto-Logged Events
                                </CardTitle>
                                <CardDescription>
                                    System-generated events and automated tracking
                                </CardDescription>
                            </CardHeader>
                            <CardContent>
                                <div className="space-y-4">
                                    {mockPipelineEntry.auto_logged_events.map((event, index) => (
                                        <div key={index} className="flex items-start space-x-3 p-3 border rounded-lg">
                                            <div className="flex-shrink-0 mt-1">
                                                {getEventIcon(event.system)}
                                            </div>
                                            <div className="flex-1">
                                                <div className="flex items-center justify-between">
                                                    <p className="font-medium">{event.event}</p>
                                                    <p className="text-xs text-muted-foreground">{event.timestamp}</p>
                                                </div>
                                                <p className="text-sm text-muted-foreground mt-1">{event.details}</p>
                                                <Badge variant="outline" className="bg-blue-100 text-blue-800 mt-2">
                                                    {event.system}
                                                </Badge>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </CardContent>
                        </Card>

                        {/* Next Actions */}
                        {mockPipelineEntry.next_action && (
                            <Card>
                                <CardHeader>
                                    <CardTitle className="flex items-center">
                                        <Calendar className="h-5 w-5 mr-2" />
                                        Next Actions
                                    </CardTitle>
                                    <CardDescription>
                                        Scheduled follow-up actions and deadlines
                                    </CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <div className="p-4 border rounded-lg bg-yellow-50 border-yellow-200">
                                        <div className="flex items-start space-x-3">
                                            <AlertTriangle className="h-5 w-5 text-yellow-600 mt-0.5" />
                                            <div className="flex-1">
                                                <p className="font-medium text-yellow-800">{mockPipelineEntry.next_action}</p>
                                                <p className="text-sm text-yellow-700 mt-1">Due: {mockPipelineEntry.next_action_due}</p>
                                            </div>
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                        )}
                    </div>

                    {/* Sidebar */}
                    <div className="space-y-6">
                        {/* Contact Information */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="text-sm flex items-center">
                                    <User className="h-4 w-4 mr-2" />
                                    Contact Information
                                </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-3">
                                <div>
                                    <p className="text-xs text-muted-foreground">Phone</p>
                                    <div className="flex items-center space-x-2">
                                        <p className="text-sm">{mockPipelineEntry.customer_phone}</p>
                                        <Button variant="ghost" size="sm">
                                            <Phone className="h-4 w-4" />
                                        </Button>
                                    </div>
                                </div>
                                <div>
                                    <p className="text-xs text-muted-foreground">Email</p>
                                    <div className="flex items-center space-x-2">
                                        <p className="text-sm">{mockPipelineEntry.customer_email}</p>
                                        <Button variant="ghost" size="sm">
                                            <Mail className="h-4 w-4" />
                                        </Button>
                                    </div>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Pipeline Metrics */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="text-sm">Pipeline Metrics</CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-3">
                                <div className="flex items-center justify-between">
                                    <span className="text-sm">Auto Events</span>
                                    <Badge variant="outline" className="bg-blue-100 text-blue-800">
                                        {mockPipelineEntry.auto_logged_events.length}
                                    </Badge>
                                </div>
                                <div className="flex items-center justify-between">
                                    <span className="text-sm">Manual Notes</span>
                                    <Badge variant="outline">{mockPipelineEntry.manual_notes}</Badge>
                                </div>
                                <div className="flex items-center justify-between">
                                    <span className="text-sm">Attachments</span>
                                    <Badge variant="outline">{mockPipelineEntry.attachments}</Badge>
                                </div>
                                <div className="flex items-center justify-between">
                                    <span className="text-sm">Stage Duration</span>
                                    <Badge variant="outline">{mockPipelineEntry.stage_duration_hours}h</Badge>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Auto-Progression Rules */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="text-sm">Auto-Progression Rules</CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-3">
                                <div className="p-2 border rounded text-xs">
                                    <div className="font-medium">Next Stage Trigger</div>
                                    <div className="text-muted-foreground">Customer responds to quote</div>
                                    <Badge variant="outline" className="bg-green-100 text-green-800 mt-1">Active</Badge>
                                </div>
                                <div className="p-2 border rounded text-xs">
                                    <div className="font-medium">Auto-Loss Rule</div>
                                    <div className="text-muted-foreground">Mark lost after 7 days inactivity</div>
                                    <Badge variant="outline" className="bg-orange-100 text-orange-800 mt-1">Monitoring</Badge>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Quick Actions */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="text-sm">Quick Actions</CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-2">
                                <Button variant="outline" size="sm" className="w-full justify-start">
                                    <Phone className="h-4 w-4 mr-2" />
                                    Call Customer
                                </Button>
                                <Button variant="outline" size="sm" className="w-full justify-start">
                                    <Mail className="h-4 w-4 mr-2" />
                                    Send Email
                                </Button>
                                <Button variant="outline" size="sm" className="w-full justify-start">
                                    <Calendar className="h-4 w-4 mr-2" />
                                    Schedule Follow-up
                                </Button>
                                <Button variant="outline" size="sm" className="w-full justify-start">
                                    <DollarSign className="h-4 w-4 mr-2" />
                                    Update Quote
                                </Button>
                            </CardContent>
                        </Card>

                        {/* Related Records */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="text-sm">Related Records</CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-2">
                                <Button variant="ghost" size="sm" className="w-full justify-start">
                                    <User className="h-4 w-4 mr-2" />
                                    Lead Profile
                                </Button>
                                <Button variant="ghost" size="sm" className="w-full justify-start">
                                    <FileText className="h-4 w-4 mr-2" />
                                    Quote Details
                                </Button>
                                <Button variant="ghost" size="sm" className="w-full justify-start">
                                    <Target className="h-4 w-4 mr-2" />
                                    Vehicle Information
                                </Button>
                                <Button variant="ghost" size="sm" className="w-full justify-start">
                                    <ExternalLink className="h-4 w-4 mr-2" />
                                    CRM Record
                                </Button>
                            </CardContent>
                        </Card>
                    </div>
                </div>
            </div>
        </AppLayout>
    );
}
